package com.tools;import cn.hutool.core.util.StrUtil;import cn.hutool.crypto.SecureUtil;import cn.hutool.crypto.SmUtil;import cn.hutool.crypto.asymmetric.KeyType;import cn.hutool.crypto.asymmetric.SM2;import java.security.KeyPair;import java.util.HashMap;import java.util.Map;/** * @author hubing * @date 2021/09/15 15:47 **/public class Code {    public static Map<String, Object> getAllSn(){        HashMap<String, String> hashMap = new HashMap<>();        hashMap.put("1","hu");        hashMap.put("2","bing");        StringBuffer stringBuffer = new StringBuffer();        hashMap.values().stream().forEach((v)->{                stringBuffer.append(v);        });        KeyPair pair = SecureUtil.generateKeyPair("SM2");        byte[] privateKey = pair.getPrivate().getEncoded();        byte[] publicKey = pair.getPublic().getEncoded();        SM2 sm2 = SmUtil.sm2(privateKey, publicKey);        String encryptStr = sm2.encryptBcd(stringBuffer.toString(), KeyType.PublicKey);        System.out.println("加密："+encryptStr);        Map<String,Object> encryptMap=new HashMap<>();        encryptMap.put("encryptStr",encryptStr);        encryptMap.put("privateKey",privateKey);        encryptMap.put("publicKey",publicKey);        return encryptMap;    }     public static void main(String [] args){         Map<String, Object> allSn = getAllSn();         String encryptStr = allSn.get("encryptStr").toString();         Object privateKey1 = allSn.get("privateKey");         Object publicKey1 = allSn.get("publicKey");         KeyPair pair = SecureUtil.generateKeyPair("SM2");         byte[] privateKey = pair.getPrivate().getEncoded();         byte[] publicKey = pair.getPublic().getEncoded();         SM2 sm2 = SmUtil.sm2((byte[]) privateKey1, (byte[]) publicKey1);         String s = StrUtil.utf8Str(sm2.decryptFromBcd(encryptStr, KeyType.PrivateKey));         System.out.println("解密 ："+ s);     }}