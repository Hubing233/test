package com.tools;import lombok.extern.slf4j.Slf4j;import org.bouncycastle.asn1.gm.GMNamedCurves;import org.bouncycastle.asn1.x9.X9ECParameters;import org.bouncycastle.crypto.AsymmetricCipherKeyPair;import org.bouncycastle.crypto.generators.ECKeyPairGenerator;import org.bouncycastle.crypto.params.*;import org.bouncycastle.math.ec.ECPoint;import org.bouncycastle.util.encoders.Hex;import java.math.BigInteger;import java.security.NoSuchAlgorithmException;import java.security.SecureRandom;/** * @author hubing * @date 2021/09/16 17:30 **/@Slf4jpublic class SM2Utils {    public static String encrypt(String publicKey, String data){        // 按国密排序标准加密        return encrypt(publicKey, data, SM2EngineExtend.CIPHERMODE_NORM);    }    private static String encrypt(String publicKey, String data, int cipherMode) {        X9ECParameters sm2ECParameters = GMNamedCurves.getByName("sm2p256v1");        ECDomainParameters domainParameters = new ECDomainParameters(sm2ECParameters.getCurve(), sm2ECParameters.getG(), sm2ECParameters.getN());        ECPoint pukPoint = sm2ECParameters.getCurve().decodePoint(Hex.decode(publicKey));        ECPublicKeyParameters publicKeyParameters = new ECPublicKeyParameters(pukPoint, domainParameters);        SM2EngineExtend sm2Engine = new SM2EngineExtend();        sm2Engine.init(true, cipherMode, new ParametersWithRandom(publicKeyParameters, new SecureRandom()));        byte[] arrayOfBytes = null;        try {            byte[] in = data.getBytes();            arrayOfBytes = sm2Engine.processBlock(in, 0, in.length);        } catch (Exception e) {            log.error("SM2加密时出现异常:{}", e.getMessage(), e);        }        return Hex.toHexString(arrayOfBytes);    }    public static SM2KeyPair getSm2Keys(boolean compressed){        X9ECParameters sm2ECParameters = GMNamedCurves.getByName("sm2p256v1");        ECDomainParameters domainParameters = new ECDomainParameters(sm2ECParameters.getCurve(), sm2ECParameters.getG(), sm2ECParameters.getN());        ECKeyPairGenerator keyPairGenerator = new ECKeyPairGenerator();        try {            keyPairGenerator.init(new ECKeyGenerationParameters(domainParameters, SecureRandom.getInstance("SHA1PRNG")));        } catch (NoSuchAlgorithmException e) {            e.printStackTrace();        }        AsymmetricCipherKeyPair asymmetricCipherKeyPair = keyPairGenerator.generateKeyPair();        ECPublicKeyParameters publicKeyParameters = (ECPublicKeyParameters)asymmetricCipherKeyPair.getPublic();        ECPoint ecPoint = publicKeyParameters.getQ();        String publicKey = Hex.toHexString(ecPoint.getEncoded(compressed));        ECPrivateKeyParameters privateKeyParameters = (ECPrivateKeyParameters) asymmetricCipherKeyPair.getPrivate();        BigInteger intPrivateKey = privateKeyParameters.getD();        String privateKey = intPrivateKey.toString(16);        return new SM2KeyPair(publicKey, privateKey);    }    public static String decrypt(String privateKey, String cipherData) {        // // 按国密排序标准解密        return decrypt(privateKey, cipherData, SM2EngineExtend.CIPHERMODE_NORM);    }    private static String decrypt(String privateKey, String cipherData, int cipherMode) {        if (!cipherData.startsWith("04")){            cipherData = "04" + cipherData;        }        byte[] cipherDataByte = Hex.decode(cipherData);        X9ECParameters sm2ECParameters = GMNamedCurves.getByName("sm2p256v1");        ECDomainParameters domainParameters = new ECDomainParameters(sm2ECParameters.getCurve(), sm2ECParameters.getG(), sm2ECParameters.getN());        BigInteger privateKeyD = new BigInteger(privateKey, 16);        ECPrivateKeyParameters privateKeyParameters = new ECPrivateKeyParameters(privateKeyD, domainParameters);        SM2EngineExtend sm2Engine = new SM2EngineExtend();        sm2Engine.init(false, cipherMode, privateKeyParameters);        String result = "";        try {            byte[] arrayOfBytes = sm2Engine.processBlock(cipherDataByte, 0, cipherDataByte.length);            return new String(arrayOfBytes);        } catch (Exception e) {            log.error("SM2解密时出现异常:{}", e.getMessage(), e);        }        return result;    }}